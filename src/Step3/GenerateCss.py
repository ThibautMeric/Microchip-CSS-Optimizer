try:
    import tkinter as tk
    from tkinter.filedialog import *
    import tkinter.ttk as ttk
    import tkinter.messagebox
except:
    import Tkinter as tk
    from tkFileDialog import *
    import ttk as ttk
    import tkMessageBox
    from Tkinter import *
import platform
import os

def GenerateCss(Type, Version, CssTable):
    IS_CLASSIC=0
    IS_DOT_MIN=1
    FileContent="/*Generated by Microchip CSS Optimizer " + Version +"*/\n"

    #Insert in the file Modifier 1-2-3

    for ColumnInCss in range(0,len(CssTable)-1):                                  # define position in CSS table
        for LineInCss in range(0,len(CssTable[ColumnInCss])):
            IndexToAdd=[]

            for NameIndex in range(0,len(CssTable[ColumnInCss][LineInCss].name)): # get names used
                if (CssTable[ColumnInCss][LineInCss].selectmode[NameIndex].get()==True):
                    IndexToAdd.append(NameIndex)

            for i in IndexToAdd:                                                  # print names used
                FileContent+=CssTable[ColumnInCss][LineInCss].name[i]
                if(IndexToAdd.index(i)<len(IndexToAdd)-1):
                    FileContent+=(",")
                FileContent+="\n"

            if(len(IndexToAdd)>0):                                                # print data
                Index = []
                for i in range(0,len(CssTable[ColumnInCss][LineInCss].data)):
                    if ((CssTable[ColumnInCss][LineInCss].data[i]==";")or (CssTable[ColumnInCss][LineInCss].data[i]=="{")):
                        Index.append(i+1)
                tmp=list(CssTable[ColumnInCss][LineInCss].data)
                y=0
                for i in range(0,len(Index)):
                    tmp.insert(Index[i]+y,"\n")
                    y+=1
                FileContent+=''.join(tmp) + " "
                FileContent+="\n"

    #Insert in the file Modifier 4, default At-Rule

    ColumnInCss=3                                                                 # define position in CSS table
    for LineInCss in range(0,len(CssTable[ColumnInCss])):

        if(CssTable[ColumnInCss][LineInCss].selectmode[0].get()==True):
            AtRuleTable=CssTable[ColumnInCss][LineInCss].ModifierTable
            IndexToAdd=[]
            FileContent +=CssTable[ColumnInCss][LineInCss].name[0] +"\n" + "{" + "\n"
            for ColumnInAtRule in range(0,len(AtRuleTable)):                      # define position in AtRule
                for LineInAtRule in range(0,len(AtRuleTable[ColumnInAtRule])):

                    for NameIndex in range(0,len(AtRuleTable[ColumnInAtRule][LineInAtRule].name)): # get names used

                        if (AtRuleTable[ColumnInAtRule][LineInAtRule].nbit[NameIndex]>0):

                            IndexToAdd.append(NameIndex)


                    if((CssTable[ColumnInCss][LineInCss].selectmode[0].get()==True)and(CssTable[ColumnInCss][LineInCss].nbit[0]==0)):# Handle case user wants the At-Rule even if not used

                        for NameIndex in range(0,len(AtRuleTable[ColumnInAtRule][LineInAtRule].name)): # get names used
                            IndexToAdd.append(NameIndex)



                    for i in IndexToAdd:                                                   # print names used
                        FileContent+= "\t" + AtRuleTable[ColumnInAtRule][LineInAtRule].name[i]
                        if(i<len(IndexToAdd)-1):
                            FileContent+=(",")
                        FileContent+="\n"


                    if(len(IndexToAdd)>0):                                                # print data
                        FileContent+="\t"
                        Index = []

                        for i in range(0,len(AtRuleTable[ColumnInAtRule][LineInAtRule].data)):
                            if ((AtRuleTable[ColumnInAtRule][LineInAtRule].data[i]==";")or (AtRuleTable[ColumnInAtRule][LineInAtRule].data[i]=="{")):
                                    while(AtRuleTable[ColumnInAtRule][LineInAtRule].data[i+1]==" "):
                                        i+=1
                                    Index.append(i)

                        temp = AtRuleTable[ColumnInAtRule][LineInAtRule].data
                        temp = temp.replace("  ", " ")
                        temp = temp.replace("   ", " ")
                        temp = temp.replace("    ", " ")
                        tmp=list(temp)
                        for i in range(0,len(Index)):
                            tmp.insert(int(Index[i]),"\n\t")

                        FileContent+=''.join(tmp)
                        FileContent+="\n"
                    IndexToAdd[:] = []
            FileContent +="}\n"


    if (Type==IS_DOT_MIN):
        FileContent = FileContent.replace('\n', '')
        FileContent = FileContent.replace('\t', '')
        FileContent = FileContent.replace("  ", " ")
        FileContent = FileContent.replace("   ", " ")
        FileContent = FileContent.replace("    ", "")

        SaveAs = asksaveasfile(mode='w', defaultextension="",title="Save As:", filetypes=[('min CSS files', '.min.css')])
        if SaveAs is None: # asksaveasfile return `None` if dialog closed with "cancel".
            return
        name= SaveAs.name
        if SaveAs.name[(len(SaveAs.name)-8):]!=".min.css":
            os.rename(SaveAs.name,SaveAs.name +".min.css")
            name+=".min.css"
        SaveAs.write(FileContent)
        SaveAs.close()
        try:
            tkinter.messagebox.showinfo("Generation successful","Your file was successfully generated under:\n"+name)
        except:
            tkMessageBox.showinfo("Generation successful","Your file was successfully generated under:\n"+name)

    else:
        SaveAs = asksaveasfile(mode='w', defaultextension="",title="Save As:", filetypes=[('CSS files', '.css')])
        if SaveAs is None: # asksaveasfile return `None` if dialog closed with "cancel".
            return
        name= SaveAs.name
        if SaveAs.name[(len(SaveAs.name)-4):]!=".css":
            os.rename(SaveAs.name,SaveAs.name +".css")
            name+=".css"
        SaveAs.write(FileContent)
        SaveAs.close()
        try:
            tkinter.messagebox.showinfo("Generation successful","Your file was successfully generated under:\n"+name)
        except:
            tkMessageBox.showinfo("Generation successful","Your file was successfully generated under:\n"+name)




pass
